variables:
  SSH_KEY: cache/sshkey
cache:
  - key: "GLOBAL_CACHE"
    paths:
      - cache/

stages:
  - newvm
  - vmconfig

newvm:
  stage: newvm
  script:
    # download Yandex Cloud CLI
    - curl https://raw.githubusercontent.com/Jokero/yandex-cloud-cli-install-for-ci/master/install.sh | bash
    - export PATH=$PATH:~/yandex-cloud/bin
    # check version
    - yc -v
    # no really need here
    - yc config set compute-default-zone ru-central1-b
    # show exists compute instances
    - yc --token $YC_TOKEN --cloud-id $YC_CLOUD_ID --folder-id $YC_FOLDER_ID compute instance list
    # (re)create cached dir - will be persistant between run
    - mkdir -p cache
    # generate new key pair if not exist
    - "[ -f $SSH_KEY ] || ssh-keygen -b 2048 -t rsa -f $SSH_KEY -q -N \"\""
    # create Yandex.Cloud compute instance
    - >
     yc 
     --token $YC_TOKEN --cloud-id $YC_CLOUD_ID --folder-id $YC_FOLDER_ID 
     compute instance create 
     --name first-instance 
     --zone ru-central1-a 
     --public-ip 
     --create-boot-disk size=20G,image-folder-id=standard-images,image-family=centos-8 
     --preemptible 
     --core-fraction 20 
     --memory 6 
     --ssh-key $SSH_KEY.pub 
    # check updated list of instances 
    - >
     yc 
     --token $YC_TOKEN --cloud-id $YC_CLOUD_ID --folder-id $YC_FOLDER_ID 
     compute instance list
    # print new vm config to file
    - >
     yc 
     --token $YC_TOKEN --cloud-id $YC_CLOUD_ID --folder-id $YC_FOLDER_ID 
     compute instance get first-instance > cache/vmconfig.txt
    - "cat cache/vmconfig.txt | grep -v 'address: 10'  | grep ' address:' | tr -d ' address:' > cache/addr"
    # wait until vm become online
    - sleep 30
  artifacts:
    paths:
      - cache/sshkey
      - cache/sshkey.pub
      - cache/vmconfig.txt
      - cache/addr
    expire_in: 1 week
  rules:
    #- when: always
    - when: never

vmconfig:
  stage: vmconfig
  script:
    - uname -a
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - cat $SSH_KEY | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> ~/.ssh/config'
    - "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null tomcat.service yc-user@`cat cache/addr`:"
    - "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null context.xml yc-user@`cat cache/addr`:"
    - echo './dl-cloud-mail-ru.sh $LINK_PG postgresql-42.0.0.jar' > upload.sh
    - echo './dl-cloud-mail-ru.sh $LINK_HELP prhelp.war' >> upload.sh
    - echo './dl-cloud-mail-ru.sh $LINK_WEB prweb.war' >> upload.sh
    - echo '' >> upload.sh
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t -t yc-user@`cat cache/addr` < before.sh
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t -t yc-user@`cat cache/addr` < upload.sh
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t -t yc-user@`cat cache/addr` < db-install.sh
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t -t yc-user@`cat cache/addr` < tomcat-install.sh
  rules:
    #- when: always
    - when: never    
